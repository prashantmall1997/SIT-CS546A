const mongoCollections = require("../config/mongoCollections");
const books = mongoCollections.books;
const bookFunction = require("./books");
var ObjectID = require("mongodb").ObjectID;

async function idFormatChecker(id) {
  if (id === undefined) {
    throw {
      status: 400,
      error: "ID parameter not passed - Generated by '/data/reviews.js'.",
    };
  }

  if (typeof id != "string") {
    throw {
      status: 400,
      error:
        "ID paramenter must be passed in string format from URL - Generated by '/data/reviews.js'.",
    };
  }

  if (!ObjectID.isValid(id)) {
    throw {
      status: 400,
      error:
        "ID paramenter passed in string format from URL is not a valid ObjectID - Generated by '/data/reviews.js'.",
    };
  }
}

async function reviewFormatChecker(review, allFieldsMandatory = 0) {
  if (allFieldsMandatory === 1) {
    if (
      !review.title ||
      !review.reviewer ||
      !review.rating ||
      !review.dateOfReview ||
      !review.review
    ) {
      throw {
        status: 400,
        error:
          "Must provide all fields: Title, Reviewer, Rating, Date when review published, Review - Generated by '/data/reviews.js'.",
      };
    }
  }

  if (allFieldsMandatory === 0) {
    if (
      !review.title &&
      !review.reviewer &&
      !review.rating &&
      !review.dateOfReview &&
      !review.review
    ) {
      throw {
        status: 400,
        error:
          "Must provide atleast one field: Title, Reviewer, Rating, Date when review published, Review - Generated by '/data/reviews.js'.",
      };
    }
  }

  if (review.title) {
    if (typeof review.title != "string") {
      throw {
        status: 400,
        error:
          "Review title must be provided in string format - Generated by '/data/reviews.js'.",
      };
    }
    if (review.title.trim() === "") {
      throw {
        status: 400,
        error:
          "Review title cannot be empty string or just blank spaces - Generated by '/data/reviews.js'.",
      };
    }
  }

  if (review.reviewer) {
    if (typeof review.reviewer != "string") {
      throw {
        status: 400,
        error:
          "Reviewer name/username must be provided in string format - Generated by '/data/reviews.js'.",
      };
    }
    if (review.reviewer.trim() === "") {
      throw {
        status: 400,
        error:
          "Reviewer name/username cannot be empty string or just blank spaces - Generated by '/data/reviews.js'.",
      };
    }
  }

  if (review.rating) {
    if (typeof review.rating != "number") {
      throw {
        status: 400,
        error:
          "Rating must be provided in number format - Generated by '/data/reviews.js'.",
      };
    }
    if (review.rating < 1 || review.rating > 5) {
      throw {
        status: 400,
        error:
          "Rating must be a range from 1 to 5 - Generated by '/data/reviews.js'.",
      };
    }
  }

  if (review.dateOfReview) {
    if (
      typeof review.dateOfReview != "string" ||
      isNaN(Date.parse(review.dateOfReview)) ||
      new Date(Date.parse(review.dateOfReview)).getDate() !=
        review.dateOfReview.split("/")[1]
    ) {
      throw {
        status: 400,
        error:
          "Review date is not a valid date MM/DD/YYYY - Generated by '/data/reviews.js'.",
      };
    }

    var regEx = /^[0-9]{1,2}?[/][0-9]{1,2}?[/][0-9]{4}?$/;

    if (!review.dateOfReview.match(regEx)) {
      throw {
        status: 400,
        error:
          "Review date is not in correct format of MM/DD/YYYY - Generated by '/data/reviews.js'.",
      };
    }
  }

  if (review.review) {
    if (typeof review.review != "string") {
      throw {
        status: 400,
        error:
          "Review must be provided in string format - Generated by '/data/reviews.js'.",
      };
    }
    if (review.review.trim() === "") {
      throw {
        status: 400,
        error:
          "Review cannot be empty string or just blank spaces - Generated by '/data/reviews.js'.",
      };
    }
  }
}

const exportedMethods = {
  async getReviews(id) {
    try {
      await idFormatChecker(id);
    } catch (e) {
      throw { status: e.status, error: e.error };
    }

    try {
      const book = await bookFunction.getBookById(id);
      if (!book) {
        throw {
          status: 404,
          error: `No book found with ID '${id}' - Generated by '/data/reviews.js'. `,
        };
      }

      const reviewsArray = book.reviews;

      reviewsArray.forEach((review) => (review._id = review._id.toString()));

      return reviewsArray;
    } catch (e) {
      throw { status: e.status, error: e.error };
    }
  },

  async addReview(id, review) {
    try {
      await idFormatChecker(id);
    } catch (e) {
      throw { status: e.status, error: e.error };
    }

    try {
      await reviewFormatChecker(review, 1);
    } catch (e) {
      throw { status: e.status, error: e.error };
    }

    try {
      const book = await bookFunction.getBookById(id);

      if (!book) {
        throw {
          status: 404,
          error: `No book found with ID '${id}' - Generated by '/data/reviews.js'. `,
        };
      }

      const bookCollection = await books();
      const updateReviews = await bookCollection.updateOne(
        { _id: ObjectID(id) },
        {
          $push: {
            reviews: {
              _id: ObjectID(),
              title: review.title,
              reviewer: review.reviewer,
              rating: review.rating,
              dateOfReview: review.dateOfReview,
              review: review.review,
            },
          },
        }
      );

      if (updateReviews.result.nModified != 1) {
        throw {
          status: 500,
          error: `Cannot add review to book found with ID '${id}' - Generated by '/data/reviews.js'. `,
        };
      }

      const updatedBook = await bookFunction.getBookById(id);
      updatedBook._id = updatedBook._id.toString();
      updatedBook.reviews.forEach(
        (review) => (review._id = review._id.toString())
      );

      return updatedBook;
    } catch (e) {
      throw { status: e.status, error: e.error };
    }
  },

  async getReview(id) {
    try {
      await idFormatChecker(id);
    } catch (e) {
      throw { status: e.status, error: e.error };
    }

    try {
      const bookCollection = await books();

      const review = await bookCollection
        .find({
          "reviews._id": { $eq: ObjectID(id) },
        })
        .next();

      if (review === null) {
        throw {
          status: 404,
          error: `No review found with ID ${id} - Generated by '/data/reviews.js'.`,
        };
      }

      const foundReview = review.reviews.filter(
        (review) => review._id.toString() === id
      )[0];
      foundReview._id = foundReview._id.toString();
      return foundReview;
    } catch (e) {
      throw { status: e.status, error: e.error };
    }
  },

  async deleteReview(id) {
    try {
      await idFormatChecker(id);
    } catch (e) {
      throw { status: e.status, error: e.error };
    }

    try {
      const reviewToDelete = await this.getReview(id);
      if (!reviewToDelete) {
        throw {
          status: 404,
          error: `No review found with ID '${id}' - Generated by '/data/reviews.js'. `,
        };
      }

      const bookCollection = await books();

      const review = await bookCollection.update(
        {},
        { $pull: { reviews: { _id: ObjectID(id) } } },
        { multi: true }
      );

      if (review.result.nModified === 0) {
        throw {
          status: 500,
          error: `Cannot delete review found with ID ${id} - Generated by '/data/reviews.js'.`,
        };
      }

      return { reviewId: id, deleted: true };
    } catch (e) {
      throw { status: e.status, error: e.error };
    }
  },
};

module.exports = exportedMethods;
