const express = require("express");
const router = express.Router();
const data = require("../data");
const bookFunction = data.books;
var ObjectID = require("mongodb").ObjectID;

async function idFormatChecker(id) {
  if (id === undefined) {
    throw {
      status: 400,
      error: "ID parameter not passed - Generated by '/routes/books.js'.",
    };
  }

  if (typeof id != "string") {
    throw {
      status: 400,
      error:
        "ID paramenter must be passed in string format from URL - Generated by '/routes/books.js'.",
    };
  }

  if (!ObjectID.isValid(id)) {
    throw {
      status: 400,
      error:
        "ID paramenter passed in string format from URL is not a valid ObjectID - Generated by '/routes/books.js'.",
    };
  }
}

async function bookFormatChecker(book, allFieldsMandatory = 0) {
  if (allFieldsMandatory === 1) {
    if (
      !book.title ||
      !book.author ||
      !book.genre ||
      !book.datePublished ||
      !book.summary
    ) {
      throw {
        status: 400,
        error:
          "Must provide all fields: Title, Author, Genre, Date Published, Summary - Generated by '/routes/books.js'.",
      };
    }
  }

  if (allFieldsMandatory === 0) {
    if (
      !book.title &&
      !book.author &&
      !book.genre &&
      !book.datePublished &&
      !book.summary
    ) {
      throw {
        status: 400,
        error:
          "Must provide atleast one field: Title, Author, Genre, Date Published, Summary - Generated by '/routes/books.js'.",
      };
    }
  }

  if (book.title) {
    if (typeof book.title != "string") {
      throw {
        status: 400,
        error:
          "Book title must be provided in string format - Generated by '/routes/books.js'.",
      };
    }
    if (book.title.trim() === "") {
      throw {
        status: 400,
        error:
          "Book title cannot be empty string or just blank spaces - Generated by '/routes/books.js'.",
      };
    }
  }

  if (book.author) {
    if (
      !book.author.authorFirstName ||
      !book.author.authorLastName ||
      typeof book.author.authorFirstName != "string" ||
      typeof book.author.authorLastName != "string" ||
      book.author.authorFirstName.trim() === "" ||
      book.author.authorLastName.trim() === ""
    ) {
      throw {
        status: 400,
        error:
          "Book Author First and Last name must be provided in non empty string format - Generated by '/routes/books.js'.",
      };
    }
  }

  if (book.genre) {
    if (!Array.isArray(book.genre) || book.genre.length < 1) {
      throw {
        status: 400,
        error:
          "Book genre must be provided in non empty array format - Generated by '/routes/books.js'.",
      };
    }

    for (var count = 0; count < book.genre.length; count++) {
      if (
        typeof book.genre[count] != "string" ||
        book.genre[count].trim() === ""
      ) {
        throw {
          status: 400,
          error:
            "All book genre array elements must be of non empty string format - Generated by '/routes/books.js'.",
        };
      }
    }
  }

  if (book.datePublished) {
    if (
      typeof book.datePublished != "string" ||
      isNaN(Date.parse(book.datePublished)) ||
      new Date(Date.parse(book.datePublished)).getDate() !=
        book.datePublished.split("/")[1]
    ) {
      throw {
        status: 400,
        error:
          "Published date parameter is not a valid date string - Generated by '/routes/books.js'.",
      };
    }

    var regEx = /^[0-9]{1,2}?[/][0-9]{1,2}?[/][0-9]{4}?$/;

    if (!book.datePublished.match(regEx)) {
      throw {
        status: 400,
        error:
          "Published date is not in correct format of MM/DD/YYYY - Generated by '/routes/books.js'.",
      };
    }
  }

  if (book.summary) {
    if (typeof book.summary != "string") {
      throw {
        status: 400,
        error:
          "Summary must be provided in string format - Generated by '/routes/books.js'.",
      };
    }
    if (book.summary.trim() === "") {
      throw {
        status: 400,
        error:
          "Summary cannot be empty string or just blank spaces - Generated by '/routes/books.js'.",
      };
    }
  }
}

router.get("/", async (req, res) => {
  try {
    const allBooks = await bookFunction.getAllBooks();
    res.status(200).json(allBooks);
  } catch (e) {
    res.status(e.status).json({ error: e.error });
  }
});

router.post("/", async (req, res) => {
  const bookData = req.body;

  try {
    await bookFormatChecker(bookData, 1);
  } catch (e) {
    res.status(e.status).json({ error: e.error });
    return;
  }

  try {
    const newBook = await bookFunction.addBook(bookData);
    res.status(200).json(newBook);
  } catch (e) {
    res.status(e.status).json({ error: e.error });
  }
});

router.get("/:id", async (req, res) => {
  try {
    await idFormatChecker(req.params.id);
  } catch (e) {
    res.status(e.status).json({ error: e.error });
    return;
  }

  try {
    const book = await bookFunction.getBookById(req.params.id);
    res.status(200).json(book);
  } catch (e) {
    res.status(e.status).json({ error: e.error });
  }
});

router.put("/:id", async (req, res) => {
  try {
    await idFormatChecker(req.params.id);
  } catch (e) {
    res.status(e.status).json({ error: e.error });
    return;
  }

  const bookData = req.body;

  try {
    await bookFormatChecker(bookData, 1);
  } catch (e) {
    res.status(e.status).json({ error: e.error });
    return;
  }

  try {
    const bookToUpdate = await bookFunction.getBookById(req.params.id);
    if (!bookToUpdate) {
      throw {
        status: 404,
        error: `No book found with ID '${id}' - Generated by '/routes/books.js'. `,
      };
    }

    const updatedBook = await bookFunction.updateBook(req.params.id, bookData);
    res.status(200).json(updatedBook);
  } catch (e) {
    res.status(e.status).json({ error: e.error });
  }
});

router.patch("/:id", async (req, res) => {
  try {
    await idFormatChecker(req.params.id);
  } catch (e) {
    res.status(e.status).json({ error: e.error });
    return;
  }

  const bookData = req.body;

  try {
    await bookFormatChecker(bookData, 0);
  } catch (e) {
    res.status(e.status).json({ error: e.error });
    return;
  }

  try {
    const updatedBook = await bookFunction.patchBook(req.params.id, bookData);
    res.status(200).json(updatedBook);
  } catch (e) {
    res.status(e.status).json({ error: e.error });
  }
});

router.delete("/:id", async (req, res) => {
  try {
    await idFormatChecker(req.params.id);
  } catch (e) {
    res.status(e.status).json({ error: e.error });
    return;
  }

  try {
    const bookToDelete = await bookFunction.getBookById(req.params.id);
    if (!bookToDelete) {
      throw {
        status: 404,
        error: `No book found with ID '${id}' - Generated by '/routes/books.js'. `,
      };
    }

    const book = await bookFunction.removeBook(req.params.id);
    res.status(200).json(book);
  } catch (e) {
    res.status(e.status).json({ error: e.error });
  }
});

module.exports = router;
