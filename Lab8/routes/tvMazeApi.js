const express = require("express");
const router = express.Router();

const data = require("../data");
const tvMazeApiData = data.tvMazeApi;

const path = require("path");

// GET http://localhost:3000/
router.get("/", async (req, res) => {
  try {
    res.sendFile(path.resolve("static/homepage.html"));
  } catch (e) {
    res.status(500).json({ message: e });
  }
});

// POST http://localhost:3000/search
router.post("/search", async (req, res) => {
  try {
    if (req.body.searchTerm === undefined) {
      throw {
        status: 400,
        error: "Search term not passed - Generated by '/routes/tvMazeApi.js'.",
      };
    }

    if (typeof req.body.searchTerm != "string") {
      throw {
        status: 400,
        error:
          "Search term must be passed in string format from search box in homepage - Generated by '/routes/tvMazeApi.js'.",
      };
    }

    if (req.body.searchTerm.trim() === "") {
      throw {
        status: 400,
        error:
          "Search term cannot be empty string or just blank spaces - Generated by '/routes/tvMazeApi.js'.",
      };
    }
  } catch (e) {
    res.status(e.status).render("error", { error: e.error, title: "Error" });
    return;
  }

  try {
    const searchTerm = req.body.searchTerm;
    const shows = await tvMazeApiData.showByName(searchTerm);

    if (shows.length === 0 || shows == undefined) {
      res.render("showsNotFound", {
        searchTerm: searchTerm,
        title: "Not Found",
      });
    } else {
      res.render("showsFound", {
        searchTerm: searchTerm,
        shows: shows,
        title: "Shows Found",
      });
    }
  } catch (e) {
    res.status(e.status).render("error", { error: e.error, title: "Error" });
  }
});

// GET http://localhost:3000/shows/{id}
router.get("/shows/:id", async (req, res) => {
  try {
    if (req.params.id === undefined) {
      throw {
        status: 400,
        error: "ID parameter not passed - Generated by '/routes/tvMazeApi.js'.",
      };
    }

    if (typeof req.params.id != "string") {
      throw {
        status: 400,
        error:
          "ID paramenter must be passed in string format from URL - Generated by '/routes/tvMazeApi.js'.",
      };
    }

    if (req.params.id.trim() === "") {
      throw {
        status: 400,
        error: "ID cannot be empty - Generated by '/routes/tvMazeApi.js'.",
      };
    }
    if (isNaN(req.params.id * 1)) {
      throw {
        status: 400,
        error:
          "ID must be a positive whole number, not letters or symbols - Generated by '/routes/tvMazeApi.js'.",
      };
    }
    if (req.params.id * 1 <= 0) {
      throw {
        status: 400,
        error:
          "ID must be a positive whole number, not zero or negative - Generated by '/routes/tvMazeApi.js'.",
      };
    }
    if ((req.params.id * 1) % 1 > 0) {
      throw {
        status: 400,
        error:
          "ID must be a positive whole number, not decimals - Generated by '/routes/tvMazeApi.js'.",
      };
    }
  } catch (e) {
    res.status(e.status).render("error", { error: e.error, title: "Error" });
    return;
  }

  try {
    const showId = req.params.id;
    const show = await tvMazeApiData.showById(showId);
    res.render("showFoundbyID", {
      show: show,
      title: show.name,
    });
  } catch (e) {
    res.status(e.status).render("error", { error: e.error, title: "Error" });
    return;
  }
});

module.exports = router;
