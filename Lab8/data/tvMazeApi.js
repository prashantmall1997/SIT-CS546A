const axios = require("axios").default;

const exportedMethods = {
  async showByName(searchTerm) {
    try {
      if (searchTerm === undefined) {
        throw {
          status: 400,
          error: "Search term not passed - Generated by '/data/tvMazeApi.js'.",
        };
      }

      if (typeof searchTerm != "string") {
        throw {
          status: 400,
          error:
            "Search term must be passed in string format from search box in homepage - Generated by '/data/tvMazeApi.js'.",
        };
      }

      if (searchTerm.trim() === "") {
        throw {
          status: 400,
          error:
            "Search term cannot be empty string or just blank spaces - Generated by '/data/tvMazeApi.js'.",
        };
      }
    } catch (e) {
      throw { status: e.status, error: e.error };
    }

    try {
      const { data } = await axios.get(
        `http://api.tvmaze.com/search/shows?q=${searchTerm}`
      );

      if (data === undefined || !Array.isArray(data)) {
        throw {
          message:
            "TV Maze API did not return data or returned data in invalid format - Generated by '/data/tvMazeApi.js'.",
        };
      }

      return data.slice(0, 20);
    } catch (e) {
      throw { status: 400, error: e.message };
    }
  },

  async showById(id) {
    try {
      if (id === undefined) {
        throw {
          status: 400,
          error: "ID parameter not passed - Generated by '/data/tvMazeApi.js'.",
        };
      }
      if (typeof id != "string") {
        throw {
          status: 400,
          error:
            "ID paramenter must be passed in string format from URL - Generated by '/data/tvMazeApi.js'.",
        };
      }
      if (id.trim() === "") {
        throw {
          status: 400,
          error: "ID cannot be empty - Generated by '/data/tvMazeApi.js'.",
        };
      }
      if (isNaN(id * 1)) {
        throw {
          status: 400,
          error:
            "ID must be a positive whole number, not letters or symbols - Generated by '/data/tvMazeApi.js'.",
        };
      }
      if (id * 1 <= 0) {
        throw {
          status: 400,
          error:
            "ID must be a positive whole number, not zero or negative - Generated by '/data/tvMazeApi.js'.",
        };
      }
      if ((id * 1) % 1 > 0) {
        throw {
          status: 400,
          error:
            "ID must be a positive whole number, not decimals - Generated by '/data/tvMazeApi.js'.",
        };
      }
    } catch (e) {
      throw { status: e.status, error: e.error };
    }

    try {
      const { data } = await axios.get(`http://api.tvmaze.com/shows/${id}`);
      var regex = /(<([^>]+)>)/gi,
        body = data.summary;
      result = body.replace(regex, "");
      data.summary = result;

      return data;
    } catch (e) {
      throw { status: 400, error: e.message };
    }
  },
};

module.exports = exportedMethods;
